// ========================================
// Prisma Schema - SFA CRM System
// ========================================

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis(version: "3.4")]
}

// ========================================
// ENUMS
// ========================================

enum RoleEnum {
  ADMIN // Administrateur: gère système, valide PDV
  SUP   // Manager: consulte dashboard uniquement
  REP   // Vendeur: terrain, visites, commandes
}

enum UserStatusEnum {
  ACTIVE
  INACTIVE
}

enum OutletStatusEnum {
  PENDING  // En attente de validation
  APPROVED // Validé par ADMIN
  REJECTED // Rejeté par ADMIN
  INACTIVE // Désactivé
}

enum RouteStatusEnum {
  PLANNED
  IN_PROGRESS
  DONE
}

enum RouteStopStatusEnum {
  PLANNED
  VISITED
  SKIPPED
}

enum TaskStatusEnum {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum OrderStatusEnum {
  DRAFT
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum PaymentMethodEnum {
  CASH
  MOBILE_MONEY
  BANK_TRANSFER
  CREDIT
}

enum SyncOpEnum {
  INSERT
  UPDATE
  DELETE
}

// ========================================
// ORGANISATION & UTILISATEURS
// ========================================

model Territory {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String   @unique
  name      String
  level     String // REGION | DISTRICT | ZONE | SECTEUR
  parentId  String?  @map("parent_id") @db.Uuid
  geom      Unsupported("geometry(MULTIPOLYGON, 4326)")?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  parent     Territory?  @relation("TerritoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  children   Territory[] @relation("TerritoryHierarchy")
  users      User[]
  outlets    Outlet[]

  @@index([parentId])
  @@map("territory")
}

model User {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String           @unique
  firstName    String           @map("first_name")
  lastName     String           @map("last_name")
  role         RoleEnum
  status       UserStatusEnum   @default(ACTIVE)
  territoryId  String           @map("territory_id") @db.Uuid
  passwordHash String           @map("password_hash")
  lastLogin    DateTime?        @map("last_login") @db.Timestamptz
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime         @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  territory           Territory   @relation(fields: [territoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  routePlans          RoutePlan[]
  visits              Visit[]
  orders              Order[]
  proposedOutlets     Outlet[]    @relation("OutletProposer")
  validatedOutlets    Outlet[]    @relation("OutletValidator")
  assignedTasks       Task[]      @relation("TaskAssignee")
  createdTasks        Task[]      @relation("TaskCreator")
  auditLogs           AuditLog[]

  @@index([territoryId])
  @@index([role])
  @@map("user")
}

// ========================================
// POINTS DE VENTE
// ========================================

model Outlet {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code               String            @unique
  name               String
  channel            String // GT | MT | HORECA | PROXI | DISTRIB
  segment            String? // A | B | C
  address            String?
  lat                Decimal?          @db.Decimal(9, 6)
  lng                Decimal?          @db.Decimal(9, 6)
  geom               Unsupported("geography(POINT, 4326)")?
  openHours          Json?             @map("open_hours")
  territoryId        String            @map("territory_id") @db.Uuid
  status             OutletStatusEnum  @default(PENDING)
  proposedBy         String?           @map("proposed_by") @db.Uuid
  validatedBy        String?           @map("validated_by") @db.Uuid
  validatedAt        DateTime?         @map("validated_at") @db.Timestamptz
  validationComment  String?           @map("validation_comment")
  osmPlaceId         String?           @map("osm_place_id")
  osmMetadata        Json?             @map("osm_metadata")
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime          @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  territory     Territory    @relation(fields: [territoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  proposer      User?        @relation("OutletProposer", fields: [proposedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  validator     User?        @relation("OutletValidator", fields: [validatedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  routeStops    RouteStop[]
  visits        Visit[]
  inventories   Inventory[]
  orders        Order[]
  tasks         Task[]

  @@index([territoryId])
  @@index([channel])
  @@index([segment])
  @@index([status])
  @@map("outlet")
}

// ========================================
// ROUTAGE & PLANIFICATION
// ========================================

model RoutePlan {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String           @map("user_id") @db.Uuid
  date        DateTime         @db.Date
  status      RouteStatusEnum  @default(PLANNED)
  isOffRoute  Boolean          @default(false) @map("is_off_route")
  constraints Json?
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime         @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user       User         @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  routeStops RouteStop[]

  @@index([userId])
  @@index([date])
  @@map("route_plan")
}

model RouteStop {
  id              String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  routePlanId     String               @map("route_plan_id") @db.Uuid
  outletId        String               @map("outlet_id") @db.Uuid
  seq             Int
  eta             DateTime?            @db.Timestamptz
  durationPlanned Int?                 @map("duration_planned")
  status          RouteStopStatusEnum  @default(PLANNED)
  reason          String?
  createdAt       DateTime             @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime             @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  routePlan RoutePlan @relation(fields: [routePlanId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  outlet    Outlet    @relation(fields: [outletId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([routePlanId])
  @@index([outletId])
  @@index([seq])
  @@map("route_stop")
}

// ========================================
// VISITES & MERCHANDISING
// ========================================

model Visit {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  outletId    String    @map("outlet_id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  checkinAt   DateTime  @map("checkin_at") @db.Timestamptz
  checkinLat  Decimal?  @map("checkin_lat") @db.Decimal(9, 6)
  checkinLng  Decimal?  @map("checkin_lng") @db.Decimal(9, 6)
  checkoutAt  DateTime? @map("checkout_at") @db.Timestamptz
  checkoutLat Decimal?  @map("checkout_lat") @db.Decimal(9, 6)
  checkoutLng Decimal?  @map("checkout_lng") @db.Decimal(9, 6)
  durationMin Int?      @map("duration_min")
  notes       String?
  score       Int?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  outlet      Outlet       @relation(fields: [outletId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  merchChecks MerchCheck[]
  orders      Order[]

  @@index([outletId])
  @@index([userId])
  @@index([checkinAt])
  @@map("visit")
}

model MerchCheck {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  visitId    String       @map("visit_id") @db.Uuid
  checklist  Json?
  planogram  Json?
  score      Int?
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime     @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  visit       Visit         @relation(fields: [visitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  merchPhotos MerchPhoto[]

  @@index([visitId])
  @@map("merch_check")
}

model MerchPhoto {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  merchCheckId String   @map("merch_check_id") @db.Uuid
  fileKey      String   @map("file_key")
  takenAt      DateTime @map("taken_at") @db.Timestamptz
  lat          Decimal? @db.Decimal(9, 6)
  lng          Decimal? @db.Decimal(9, 6)
  meta         Json?
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  merchCheck MerchCheck @relation(fields: [merchCheckId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([merchCheckId])
  @@map("merch_photo")
}

// ========================================
// TÂCHES
// ========================================

model Task {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assignedTo  String         @map("assigned_to") @db.Uuid
  assignedBy  String         @map("assigned_by") @db.Uuid
  outletId    String?        @map("outlet_id") @db.Uuid
  type        String
  title       String
  description String?
  status      TaskStatusEnum @default(PENDING)
  formData    Json?          @map("form_data")
  dueDate     DateTime?      @map("due_date") @db.Timestamptz
  completedAt DateTime?      @map("completed_at") @db.Timestamptz
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime       @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  assignee User    @relation("TaskAssignee", fields: [assignedTo], references: [id], onDelete: Restrict, onUpdate: Cascade)
  assigner User    @relation("TaskCreator", fields: [assignedBy], references: [id], onDelete: Restrict, onUpdate: Cascade)
  outlet   Outlet? @relation(fields: [outletId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([assignedTo])
  @@index([assignedBy])
  @@index([outletId])
  @@index([status])
  @@map("task")
}

// ========================================
// CATALOGUE & STOCK
// ========================================

model SKU {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ean        String      @unique
  name       String
  brand      String
  category   String?
  priceHt    Decimal     @map("price_ht") @db.Decimal(12, 2)
  vatRate    Decimal     @map("vat_rate") @db.Decimal(4, 2)
  active     Boolean     @default(true)
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  inventories Inventory[]
  orderLines  OrderLine[]

  @@index([brand])
  @@index([category])
  @@map("sku")
}

model Inventory {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  outletId       String   @map("outlet_id") @db.Uuid
  skuId          String   @map("sku_id") @db.Uuid
  stock          Int      @default(0)
  alertThreshold Int      @default(0) @map("alert_threshold")
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  outlet Outlet @relation(fields: [outletId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sku    SKU    @relation(fields: [skuId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([outletId, skuId])
  @@map("inventory")
}

// ========================================
// COMMANDES & PAIEMENTS
// ========================================

model Order {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  outletId      String          @map("outlet_id") @db.Uuid
  userId        String          @map("user_id") @db.Uuid
  visitId       String?         @map("visit_id") @db.Uuid
  status        OrderStatusEnum @default(DRAFT)
  discountTotal Decimal         @default(0) @map("discount_total") @db.Decimal(12, 2)
  taxTotal      Decimal         @default(0) @map("tax_total") @db.Decimal(12, 2)
  totalHt       Decimal         @default(0) @map("total_ht") @db.Decimal(12, 2)
  totalTtc      Decimal         @default(0) @map("total_ttc") @db.Decimal(12, 2)
  currency      String          @default("XOF")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime        @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  outlet     Outlet      @relation(fields: [outletId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  visit      Visit?      @relation(fields: [visitId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orderLines OrderLine[]
  payments   Payment[]

  @@index([outletId])
  @@index([userId])
  @@index([createdAt])
  @@map("order")
}

model OrderLine {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId      String   @map("order_id") @db.Uuid
  skuId        String   @map("sku_id") @db.Uuid
  qty          Int
  unitPrice    Decimal  @map("unit_price") @db.Decimal(12, 2)
  vatRate      Decimal  @map("vat_rate") @db.Decimal(4, 2)
  lineTotalHt  Decimal  @default(0) @map("line_total_ht") @db.Decimal(12, 2)
  lineTotalTtc Decimal  @default(0) @map("line_total_ttc") @db.Decimal(12, 2)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sku   SKU   @relation(fields: [skuId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([orderId])
  @@index([skuId])
  @@map("order_line")
}

model Payment {
  id             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId        String            @map("order_id") @db.Uuid
  method         PaymentMethodEnum
  amount         Decimal           @db.Decimal(12, 2)
  paidAt         DateTime          @default(now()) @map("paid_at") @db.Timestamptz
  transactionRef String?           @map("transaction_ref")
  meta           Json?
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([orderId])
  @@index([paidAt])
  @@map("payment")
}

// ========================================
// AUDIT & SYNCHRONISATION
// ========================================

model AuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  action    String
  entity    String
  entityId  String?  @map("entity_id")
  diff      Json?
  ip        String?
  userAgent String?  @map("user_agent")
  at        DateTime @default(now()) @db.Timestamptz

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([entity, entityId])
  @@index([at])
  @@map("audit_log")
}

model SyncQueue {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entity    String
  entityId  String     @map("entity_id")
  op        SyncOpEnum
  payload   Json?
  version   BigInt     @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz

  @@unique([version])
  @@index([entity, entityId])
  @@map("sync_queue")
}
